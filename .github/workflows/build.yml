name: Build & Publish

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Don't cancel builds

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/open-syntax/ultimatexo

jobs:
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # For sigstore signing
    outputs:
      client-image: ${{ steps.meta-client.outputs.tags }}
      server-image: ${{ steps.meta-server.outputs.tags }}
      client-digest: ${{ steps.build-client.outputs.digest }}
      server-digest: ${{ steps.build-server.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION="latest"
          else
            VERSION="${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract client metadata
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BASE }}-client
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=UltimateXO Client
            org.opencontainers.image.description=UltimateXO game client
            org.opencontainers.image.vendor=OutOfSyntax

      - name: Extract server metadata
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BASE }}-server
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=UltimateXO Server
            org.opencontainers.image.description=UltimateXO game server
            org.opencontainers.image.vendor=OutOfSyntax

      - name: Build and push client image
        id: build-client
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha,scope=ultimatexo-client
          cache-to: type=gha,mode=max,scope=ultimatexo-client
          provenance: true
          sbom: true

      - name: Build and push server image
        id: build-server
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha,scope=ultimatexo-server
          cache-to: type=gha,mode=max,scope=ultimatexo-server
          provenance: true
          sbom: true

  # Vulnerability scanning of built images
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write # For uploading SARIF
    strategy:
      matrix:
        image: [client, server]
    steps:
      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_BASE }}-${{ matrix.image }}@${{ matrix.image == 'client' && needs.build-and-push.outputs.client-digest || needs.build-and-push.outputs.server-digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_BASE }}-${{ matrix.image }}@${{ matrix.image == 'client' && needs.build-and-push.outputs.client-digest || needs.build-and-push.outputs.server-digest }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always()
    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: github.event_name == 'release' || github.ref == 'refs/heads/main'
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: ${{ needs.security-scan.result == 'success' && '✅ Build Successful' || '❌ Build Failed' }}
          description: |
            **Version:** `${{ needs.build-and-push.outputs.version }}`
            **Build:** ${{ needs.build-and-push.result == 'success' && '✅' || '❌' }}
            **Security Scan:** ${{ needs.security-scan.result == 'success' && '✅' || '❌' }}
            
            [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: ${{ needs.security-scan.result == 'success' && 0x28a745 || 0xdc3545 }}
          username: "UltimateXO CI Bot"
