name: CI

on:
  pull_request:
  push:
    branches: [main, dev]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10 

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('client/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: server -> target

      - name: Install client dependencies
        working-directory: client
        run: pnpm install --frozen-lockfile

      # Client checks
      - name: Lint client
        working-directory: client
        run: pnpm run lint || echo "No lint script found"

      - name: Format check client
        working-directory: client
        run: pnpm run format:check || echo "No format check script found"

      - name: Type check client
        working-directory: client
        run: pnpm run type-check || echo "No type check script found"

      # Server checks
      - name: Format check server
        working-directory: server
        run: cargo fmt -- --check

      - name: Clippy server
        working-directory: server
        run: cargo clippy -- -D warnings

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: server -> target

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit Rust dependencies
        working-directory: server
        run: cargo audit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Audit npm dependencies
        working-directory: client
        run: pnpm audit --prod || true # Don't fail on advisory

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        node: ['20']
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('client/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: server -> target

      - name: Install client dependencies
        working-directory: client
        run: pnpm install --frozen-lockfile

      - name: Run client tests
        working-directory: client
        run: |
          if pnpm run test --run 2>/dev/null; then
            pnpm run test --run
          else
            echo "No tests configured, skipping..."
          fi

      - name: Run server tests
        working-directory: server
        run: cargo test --verbose

      - name: Generate test coverage
        if: matrix.rust == 'stable'
        working-directory: server
        run: |
          cargo install cargo-tarpaulin || true
          cargo tarpaulin --out Xml --output-dir coverage || echo "Coverage generation failed"

      - name: Upload coverage
        if: matrix.rust == 'stable'
        uses: codecov/codecov-action@v4
        with:
          files: ./server/coverage/cobertura.xml
          flags: server
          fail_ci_if_error: false

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build client image (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: false
          tags: ultimatexo-client:ci
          cache-from: type=gha,scope=ultimatexo-client
          cache-to: type=gha,mode=max,scope=ultimatexo-client

      - name: Build server image (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: false
          tags: ultimatexo-server:ci
          cache-from: type=gha,scope=ultimatexo-server
          cache-to: type=gha,mode=max,scope=ultimatexo-server

  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, security-audit, test, build-check]
    if: always()
    steps:
      - name: Check CI results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.security-audit.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build-check.result }}" != "success" ]; then
            echo "CI checks failed"
            exit 1
          fi
          echo "All CI checks passed!"

      - name: Summary
        run: |
          echo "## CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | ${{ needs.build-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
