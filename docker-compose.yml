# UltimateXO Docker Compose Configuration
# Production-ready setup with enhanced security, monitoring, and reliability

version: '3.9'

services:
  server:
    image: ${IMAGE_BASE:-ghcr.io/open-syntax/ultimatexo}-server:${RELEASE_VERSION:-latest}
    container_name: ultimatexo-server
    networks:
      - app-network
    restart: unless-stopped

    environment:
      - RUST_BACKTRACE=1
      - RUST_LOG=${RUST_LOG:-info}
      - HOST=0.0.0.0
      - PORT=6767
      - TZ=UTC

    # Improved resource limits with more realistic production values
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
      # Add update strategy for zero-downtime deployments
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s

    # Enhanced health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6767/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging configuration with labels
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
        labels: "service,environment"

    # Enhanced security
    security_opt:
      - no-new-privileges:true

    # Run as non-root user (requires USER in Dockerfile)
    # user: "1000:1000"

    # Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp:size=100M,mode=1777

    # Linux capabilities (drop all, add only what's needed)
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

    labels:
      - "com.docker.compose.project=ultimatexo"
      - "com.docker.compose.service=server"
      - "com.ultimatexo.component=backend"
      - "com.ultimatexo.version=${RELEASE_VERSION:-latest}"

  client:
    image: ${IMAGE_BASE:-ghcr.io/open-syntax/ultimatexo}-client:${RELEASE_VERSION:-latest}
    container_name: ultimatexo-client
    networks:
      - app-network
    restart: unless-stopped

    environment:
      - NODE_ENV=production
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
      - TZ=UTC

    depends_on:
      server:
        condition: service_healthy

    # Improved resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s

    # Enhanced health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
        labels: "service,environment"

    # Enhanced security
    security_opt:
      - no-new-privileges:true

    read_only: true
    tmpfs:
      - /var/cache/nginx:size=50M,mode=0755
      - /var/run:size=10M,mode=0755
      - /tmp:size=50M,mode=1777

    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID

    labels:
      - "com.docker.compose.project=ultimatexo"
      - "com.docker.compose.service=client"
      - "com.ultimatexo.component=frontend"
      - "com.ultimatexo.version=${RELEASE_VERSION:-latest}"

  proxy:
    image: ghcr.io/slothcroissant/caddy-cloudflaredns:latest
    container_name: ultimatexo-proxy

    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3 support

    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy

    environment:
      - ACME_AGREE=true
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - TZ=UTC

    depends_on:
      server:
        condition: service_healthy
      client:
        condition: service_healthy

    networks:
      - app-network

    restart: unless-stopped

    # Improved resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

    # Enhanced health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2019/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
        labels: "service,environment"

    security_opt:
      - no-new-privileges:true

    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

    labels:
      - "com.docker.compose.project=ultimatexo"
      - "com.docker.compose.service=proxy"
      - "com.ultimatexo.component=proxy"
      - "com.ultimatexo.version=${RELEASE_VERSION:-latest}"

networks:
  app-network:
    driver: bridge
    name: ultimatexo-network
    ipam:
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-ultimatexo
    labels:
      - "com.docker.compose.project=ultimatexo"
      - "com.docker.compose.network=app-network"

volumes:
  caddy_data:
    name: ultimatexo-caddy-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_DATA_PATH:-./volumes/caddy_data}
    labels:
      - "com.docker.compose.project=ultimatexo"
      - "com.docker.compose.volume=caddy-data"

  caddy_config:
    name: ultimatexo-caddy-config
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_CONFIG_PATH:-./volumes/caddy_config}
    labels:
      - "com.docker.compose.project=ultimatexo"
      - "com.docker.compose.volume=caddy-config"

  caddy_logs:
    name: ultimatexo-caddy-logs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_LOGS_PATH:-./volumes/caddy_logs}
    labels:
      - "com.docker.compose.project=ultimatexo"
      - "com.docker.compose.volume=caddy-logs"
